// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: globalStatus.proto

package io.seata.codec.protobuf.generated;

/**
 * <pre>
 * PublishRequest is a publish request.
 * </pre>
 *
 * Protobuf enum {@code io.seata.protocol.protobuf.GlobalStatusProto}
 */
public enum GlobalStatusProto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unknown
   * </pre>
   *
   * <code>UnKnown = 0;</code>
   */
  UnKnown(0),
  /**
   * <pre>
   * PHASE 1: can accept new branch registering.
   * </pre>
   *
   * <code>Begin = 1;</code>
   */
  Begin(1),
  /**
   * <pre>
   * Committing.
   * </pre>
   *
   * <code>Committing = 2;</code>
   */
  Committing(2),
  /**
   * <pre>
   * Retrying commit after a recoverable failure.
   * </pre>
   *
   * <code>CommitRetrying = 3;</code>
   */
  CommitRetrying(3),
  /**
   * <pre>
   * Rollbacking
   * </pre>
   *
   * <code>Rollbacking = 4;</code>
   */
  Rollbacking(4),
  /**
   * <pre>
   * Retrying rollback after a recoverable failure.
   * </pre>
   *
   * <code>RollbackRetrying = 5;</code>
   */
  RollbackRetrying(5),
  /**
   * <pre>
   * Rollbacking since timeout
   * </pre>
   *
   * <code>TimeoutRollbacking = 6;</code>
   */
  TimeoutRollbacking(6),
  /**
   * <pre>
   * Retrying rollback (since timeout) after a recoverable failure.
   * </pre>
   *
   * <code>TimeoutRollbackRetrying = 7;</code>
   */
  TimeoutRollbackRetrying(7),
  /**
   * <pre>
   **
   * All branches can be async committed. The committing is NOT done yet, but it can be seen as committed for TM/RM
   * client.
   * </pre>
   *
   * <code>AsyncCommitting = 8;</code>
   */
  AsyncCommitting(8),
  /**
   * <pre>
   * Finally: global transaction is successfully committed.
   * </pre>
   *
   * <code>Committed = 9;</code>
   */
  Committed(9),
  /**
   * <pre>
   * Finally: failed to commit
   * </pre>
   *
   * <code>CommitFailed = 10;</code>
   */
  CommitFailed(10),
  /**
   * <pre>
   * Finally: global transaction is successfully rollbacked.
   * </pre>
   *
   * <code>Rollbacked = 11;</code>
   */
  Rollbacked(11),
  /**
   * <pre>
   * Finally: failed to rollback
   * </pre>
   *
   * <code>RollbackFailed = 12;</code>
   */
  RollbackFailed(12),
  /**
   * <pre>
   * Finally: global transaction is successfully rollbacked since timeout.
   * </pre>
   *
   * <code>TimeoutRollbacked = 13;</code>
   */
  TimeoutRollbacked(13),
  /**
   * <pre>
   * Finally: failed to rollback since timeout
   * </pre>
   *
   * <code>TimeoutRollbackFailed = 14;</code>
   */
  TimeoutRollbackFailed(14),
  /**
   * <pre>
   * Not managed in session MAP any more
   * </pre>
   *
   * <code>Finished = 15;</code>
   */
  Finished(15),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unknown
   * </pre>
   *
   * <code>UnKnown = 0;</code>
   */
  public static final int UnKnown_VALUE = 0;
  /**
   * <pre>
   * PHASE 1: can accept new branch registering.
   * </pre>
   *
   * <code>Begin = 1;</code>
   */
  public static final int Begin_VALUE = 1;
  /**
   * <pre>
   * Committing.
   * </pre>
   *
   * <code>Committing = 2;</code>
   */
  public static final int Committing_VALUE = 2;
  /**
   * <pre>
   * Retrying commit after a recoverable failure.
   * </pre>
   *
   * <code>CommitRetrying = 3;</code>
   */
  public static final int CommitRetrying_VALUE = 3;
  /**
   * <pre>
   * Rollbacking
   * </pre>
   *
   * <code>Rollbacking = 4;</code>
   */
  public static final int Rollbacking_VALUE = 4;
  /**
   * <pre>
   * Retrying rollback after a recoverable failure.
   * </pre>
   *
   * <code>RollbackRetrying = 5;</code>
   */
  public static final int RollbackRetrying_VALUE = 5;
  /**
   * <pre>
   * Rollbacking since timeout
   * </pre>
   *
   * <code>TimeoutRollbacking = 6;</code>
   */
  public static final int TimeoutRollbacking_VALUE = 6;
  /**
   * <pre>
   * Retrying rollback (since timeout) after a recoverable failure.
   * </pre>
   *
   * <code>TimeoutRollbackRetrying = 7;</code>
   */
  public static final int TimeoutRollbackRetrying_VALUE = 7;
  /**
   * <pre>
   **
   * All branches can be async committed. The committing is NOT done yet, but it can be seen as committed for TM/RM
   * client.
   * </pre>
   *
   * <code>AsyncCommitting = 8;</code>
   */
  public static final int AsyncCommitting_VALUE = 8;
  /**
   * <pre>
   * Finally: global transaction is successfully committed.
   * </pre>
   *
   * <code>Committed = 9;</code>
   */
  public static final int Committed_VALUE = 9;
  /**
   * <pre>
   * Finally: failed to commit
   * </pre>
   *
   * <code>CommitFailed = 10;</code>
   */
  public static final int CommitFailed_VALUE = 10;
  /**
   * <pre>
   * Finally: global transaction is successfully rollbacked.
   * </pre>
   *
   * <code>Rollbacked = 11;</code>
   */
  public static final int Rollbacked_VALUE = 11;
  /**
   * <pre>
   * Finally: failed to rollback
   * </pre>
   *
   * <code>RollbackFailed = 12;</code>
   */
  public static final int RollbackFailed_VALUE = 12;
  /**
   * <pre>
   * Finally: global transaction is successfully rollbacked since timeout.
   * </pre>
   *
   * <code>TimeoutRollbacked = 13;</code>
   */
  public static final int TimeoutRollbacked_VALUE = 13;
  /**
   * <pre>
   * Finally: failed to rollback since timeout
   * </pre>
   *
   * <code>TimeoutRollbackFailed = 14;</code>
   */
  public static final int TimeoutRollbackFailed_VALUE = 14;
  /**
   * <pre>
   * Not managed in session MAP any more
   * </pre>
   *
   * <code>Finished = 15;</code>
   */
  public static final int Finished_VALUE = 15;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GlobalStatusProto valueOf(int value) {
    return forNumber(value);
  }

  public static GlobalStatusProto forNumber(int value) {
    switch (value) {
      case 0: return UnKnown;
      case 1: return Begin;
      case 2: return Committing;
      case 3: return CommitRetrying;
      case 4: return Rollbacking;
      case 5: return RollbackRetrying;
      case 6: return TimeoutRollbacking;
      case 7: return TimeoutRollbackRetrying;
      case 8: return AsyncCommitting;
      case 9: return Committed;
      case 10: return CommitFailed;
      case 11: return Rollbacked;
      case 12: return RollbackFailed;
      case 13: return TimeoutRollbacked;
      case 14: return TimeoutRollbackFailed;
      case 15: return Finished;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GlobalStatusProto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GlobalStatusProto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GlobalStatusProto>() {
          public GlobalStatusProto findValueByNumber(int number) {
            return GlobalStatusProto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.seata.codec.protobuf.generated.GlobalStatus.getDescriptor().getEnumTypes().get(0);
  }

  private static final GlobalStatusProto[] VALUES = values();

  public static GlobalStatusProto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GlobalStatusProto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.seata.protocol.protobuf.GlobalStatusProto)
}

