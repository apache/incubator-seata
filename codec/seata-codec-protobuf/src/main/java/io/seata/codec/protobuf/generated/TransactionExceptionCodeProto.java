// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactionExceptionCode.proto

package io.seata.codec.protobuf.generated;

/**
 * <pre>
 * PublishRequest is a publish request.
 * </pre>
 *
 * Protobuf enum {@code io.seata.protocol.protobuf.TransactionExceptionCodeProto}
 */
public enum TransactionExceptionCodeProto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * </pre>
   *
   * <code>Unknown = 0;</code>
   */
  Unknown(0),
  /**
   * <pre>
   * </pre>
   *
   * <code>LockKeyConflict = 1;</code>
   */
  LockKeyConflict(1),
  /**
   * <pre>
   * </pre>
   *
   * <code>IO = 2;</code>
   */
  IO(2),
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRollbackFailed_Retriable = 3;</code>
   */
  BranchRollbackFailed_Retriable(3),
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRollbackFailed_Unretriable = 4;</code>
   */
  BranchRollbackFailed_Unretriable(4),
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRegisterFailed = 5;</code>
   */
  BranchRegisterFailed(5),
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchReportFailed = 6;</code>
   */
  BranchReportFailed(6),
  /**
   * <pre>
   * </pre>
   *
   * <code>LockableCheckFailed = 7;</code>
   */
  LockableCheckFailed(7),
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchTransactionNotExist = 8;</code>
   */
  BranchTransactionNotExist(8),
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionNotExist = 9;</code>
   */
  GlobalTransactionNotExist(9),
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionNotActive = 10;</code>
   */
  GlobalTransactionNotActive(10),
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionStatusInvalid = 11;</code>
   */
  GlobalTransactionStatusInvalid(11),
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToSendBranchCommitRequest = 12;</code>
   */
  FailedToSendBranchCommitRequest(12),
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToSendBranchRollbackRequest = 13;</code>
   */
  FailedToSendBranchRollbackRequest(13),
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToAddBranch = 14;</code>
   */
  FailedToAddBranch(14),
  /**
   * <pre>
   **
   *  Failed to lock global transaction exception code.
   * </pre>
   *
   * <code>FailedLockGlobalTranscation = 15;</code>
   */
  FailedLockGlobalTranscation(15),
  /**
   * <pre>
   **
   * FailedWriteSession
   * </pre>
   *
   * <code>FailedWriteSession = 16;</code>
   */
  FailedWriteSession(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * </pre>
   *
   * <code>Unknown = 0;</code>
   */
  public static final int Unknown_VALUE = 0;
  /**
   * <pre>
   * </pre>
   *
   * <code>LockKeyConflict = 1;</code>
   */
  public static final int LockKeyConflict_VALUE = 1;
  /**
   * <pre>
   * </pre>
   *
   * <code>IO = 2;</code>
   */
  public static final int IO_VALUE = 2;
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRollbackFailed_Retriable = 3;</code>
   */
  public static final int BranchRollbackFailed_Retriable_VALUE = 3;
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRollbackFailed_Unretriable = 4;</code>
   */
  public static final int BranchRollbackFailed_Unretriable_VALUE = 4;
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchRegisterFailed = 5;</code>
   */
  public static final int BranchRegisterFailed_VALUE = 5;
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchReportFailed = 6;</code>
   */
  public static final int BranchReportFailed_VALUE = 6;
  /**
   * <pre>
   * </pre>
   *
   * <code>LockableCheckFailed = 7;</code>
   */
  public static final int LockableCheckFailed_VALUE = 7;
  /**
   * <pre>
   * </pre>
   *
   * <code>BranchTransactionNotExist = 8;</code>
   */
  public static final int BranchTransactionNotExist_VALUE = 8;
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionNotExist = 9;</code>
   */
  public static final int GlobalTransactionNotExist_VALUE = 9;
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionNotActive = 10;</code>
   */
  public static final int GlobalTransactionNotActive_VALUE = 10;
  /**
   * <pre>
   * </pre>
   *
   * <code>GlobalTransactionStatusInvalid = 11;</code>
   */
  public static final int GlobalTransactionStatusInvalid_VALUE = 11;
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToSendBranchCommitRequest = 12;</code>
   */
  public static final int FailedToSendBranchCommitRequest_VALUE = 12;
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToSendBranchRollbackRequest = 13;</code>
   */
  public static final int FailedToSendBranchRollbackRequest_VALUE = 13;
  /**
   * <pre>
   * </pre>
   *
   * <code>FailedToAddBranch = 14;</code>
   */
  public static final int FailedToAddBranch_VALUE = 14;
  /**
   * <pre>
   **
   *  Failed to lock global transaction exception code.
   * </pre>
   *
   * <code>FailedLockGlobalTranscation = 15;</code>
   */
  public static final int FailedLockGlobalTranscation_VALUE = 15;
  /**
   * <pre>
   **
   * FailedWriteSession
   * </pre>
   *
   * <code>FailedWriteSession = 16;</code>
   */
  public static final int FailedWriteSession_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TransactionExceptionCodeProto valueOf(int value) {
    return forNumber(value);
  }

  public static TransactionExceptionCodeProto forNumber(int value) {
    switch (value) {
      case 0: return Unknown;
      case 1: return LockKeyConflict;
      case 2: return IO;
      case 3: return BranchRollbackFailed_Retriable;
      case 4: return BranchRollbackFailed_Unretriable;
      case 5: return BranchRegisterFailed;
      case 6: return BranchReportFailed;
      case 7: return LockableCheckFailed;
      case 8: return BranchTransactionNotExist;
      case 9: return GlobalTransactionNotExist;
      case 10: return GlobalTransactionNotActive;
      case 11: return GlobalTransactionStatusInvalid;
      case 12: return FailedToSendBranchCommitRequest;
      case 13: return FailedToSendBranchRollbackRequest;
      case 14: return FailedToAddBranch;
      case 15: return FailedLockGlobalTranscation;
      case 16: return FailedWriteSession;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TransactionExceptionCodeProto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TransactionExceptionCodeProto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TransactionExceptionCodeProto>() {
          public TransactionExceptionCodeProto findValueByNumber(int number) {
            return TransactionExceptionCodeProto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.seata.codec.protobuf.generated.TransactionExceptionCode.getDescriptor().getEnumTypes().get(0);
  }

  private static final TransactionExceptionCodeProto[] VALUES = values();

  public static TransactionExceptionCodeProto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TransactionExceptionCodeProto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.seata.protocol.protobuf.TransactionExceptionCodeProto)
}

