{
  "Name": "simpleParallelTestStateMachineWithCompensation",
  "Comment": "带并发参数的用于测试事务恢复的状态机定义",
  "StartState": "FirstState",
  "Version": "0.0.1",
  "States": {
    "FirstState": {
      "Type": "Parallel",
      "Branches": [
        "FifthState",
        "SixState",
        "ThirdState",
        "ForthState"
      ],
      "Parallel": 2,
      "Output": {
        "parallelResult": "$.#root"
      },
      "Next": "ChoiceState"
    },
    "ChoiceState":{
      "Type": "Choice",
      "Choices":[
        {
          "Expression":"[a] == 1",
          "Next":"SecondState"
        }
      ],
      "Default":"Fail"
    },
    "SecondState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "bar",
      "Input": [
        {
          "a": "$.[a]"
        }
      ]
    },
    "ThirdState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "bar",
      "CompensateState": "CompensateSecondState",
      "Input": [
        {
          "throwException": "$.[barThrowException]"
        }
      ],
      "Catch": [
        {
          "Exceptions": [
            "io.seata.saga.engine.mock.DemoException"
          ],
          "Next": "CompensationTriggerTest"
        }
      ]
    },
    "ForthState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "bar",
      "CompensateState": "CompensateSecondState",
      "Input": [
        {
          "throwException": "$.[barThrowException]"
        }
      ],
      "Catch": [
        {
          "Exceptions": [
            "io.seata.saga.engine.mock.DemoException"
          ],
          "Next": "CompensationTriggerTest"
        }
      ]
    },
    "FifthState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "bar",
      "Input": [
        {
          "a": "$.[a]"
        }
      ]
    },
    "SixState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "bar",
      "Input": [
        {
          "a": "$.[a]"
        }
      ]
    },
    "CompensateSecondState": {
      "Type": "ServiceTask",
      "ServiceName": "demoService",
      "ServiceMethod": "compensateBar",
      "Input": [
        {
          "throwException": "$.[compensateBarThrowException]"
        }
      ]
    },
    "CompensationTriggerTest": {
      "Type": "CompensationTrigger",
      "Next": "Fail"
    },
    "Succeed": {
      "Type":"Succeed"
    },
    "Fail": {
      "Type":"Fail",
      "ErrorCode": "NOT_FOUND",
      "Message": "not found"
    }
  }
}